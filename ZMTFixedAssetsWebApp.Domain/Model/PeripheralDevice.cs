//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace ZMTFixedAssetsWebApp.Domain.Model
{
    public partial class PeripheralDevice
    {
        #region Primitive Properties
    
        public virtual int id
        {
            get;
            set;
        }
    
        public virtual string name
        {
            get;
            set;
        }

        #endregion
        #region Navigation Properties
    
        public virtual ICollection<Device> Device
        {
            get
            {
                if (_device == null)
                {
                    var newCollection = new FixupCollection<Device>();
                    newCollection.CollectionChanged += FixupDevice;
                    _device = newCollection;
                }
                return _device;
            }
            set
            {
                if (!ReferenceEquals(_device, value))
                {
                    var previousValue = _device as FixupCollection<Device>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupDevice;
                    }
                    _device = value;
                    var newValue = value as FixupCollection<Device>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupDevice;
                    }
                }
            }
        }
        private ICollection<Device> _device;
    
        public virtual ICollection<Device> Device1
        {
            get
            {
                if (_device1 == null)
                {
                    var newCollection = new FixupCollection<Device>();
                    newCollection.CollectionChanged += FixupDevice1;
                    _device1 = newCollection;
                }
                return _device1;
            }
            set
            {
                if (!ReferenceEquals(_device1, value))
                {
                    var previousValue = _device1 as FixupCollection<Device>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupDevice1;
                    }
                    _device1 = value;
                    var newValue = value as FixupCollection<Device>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupDevice1;
                    }
                }
            }
        }
        private ICollection<Device> _device1;

        #endregion
        #region Association Fixup
    
        private void FixupDevice(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Device item in e.NewItems)
                {
                    item.PeripheralDevice = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Device item in e.OldItems)
                {
                    if (ReferenceEquals(item.PeripheralDevice, this))
                    {
                        item.PeripheralDevice = null;
                    }
                }
            }
        }
    
        private void FixupDevice1(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Device item in e.NewItems)
                {
                    item.PeripheralDevice1 = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Device item in e.OldItems)
                {
                    if (ReferenceEquals(item.PeripheralDevice1, this))
                    {
                        item.PeripheralDevice1 = null;
                    }
                }
            }
        }

        #endregion
    }
}
