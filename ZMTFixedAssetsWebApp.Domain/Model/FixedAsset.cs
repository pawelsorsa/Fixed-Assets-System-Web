//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace ZMTFixedAssetsWebApp.Domain.Model
{
    public partial class FixedAsset
    {
        #region Primitive Properties
    
        public virtual int id
        {
            get;
            set;
        }
    
        public virtual string inventory_number
        {
            get;
            set;
        }
    
        public virtual string comment
        {
            get;
            set;
        }
    
        public virtual Nullable<int> id_person
        {
            get { return _id_person; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_id_person != value)
                    {
                        if (Person != null && Person.id != value)
                        {
                            Person = null;
                        }
                        _id_person = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<int> _id_person;
    
        public virtual System.DateTime date_of_activation
        {
            get;
            set;
        }
    
        public virtual Nullable<System.DateTime> date_of_desactivation
        {
            get;
            set;
        }
    
        public virtual string serial_number
        {
            get;
            set;
        }
    
        public virtual string MPK
        {
            get;
            set;
        }
    
        public virtual Nullable<int> quantity
        {
            get;
            set;
        }
    
        public virtual string localization
        {
            get;
            set;
        }
    
        public virtual Nullable<int> id_kind
        {
            get;
            set;
        }
    
        public virtual Nullable<int> id_subgroup
        {
            get { return _id_subgroup; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_id_subgroup != value)
                    {
                        if (Subgroup != null && Subgroup.id != value)
                        {
                            Subgroup = null;
                        }
                        _id_subgroup = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<int> _id_subgroup;
    
        public virtual Nullable<System.DateTime> last_modified_date
        {
            get;
            set;
        }
    
        public virtual string last_modifed_login
        {
            get;
            set;
        }
    
        public virtual bool cassation
        {
            get;
            set;
        }
    
        public virtual string created_by
        {
            get;
            set;
        }
    
        public virtual Nullable<int> id_contractor
        {
            get { return _id_contractor; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_id_contractor != value)
                    {
                        if (Contractor != null && Contractor.id != value)
                        {
                            Contractor = null;
                        }
                        _id_contractor = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<int> _id_contractor;

        #endregion
        #region Navigation Properties
    
        public virtual Contractor Contractor
        {
            get { return _contractor; }
            set
            {
                if (!ReferenceEquals(_contractor, value))
                {
                    var previousValue = _contractor;
                    _contractor = value;
                    FixupContractor(previousValue);
                }
            }
        }
        private Contractor _contractor;
    
        public virtual ICollection<Device> Devices
        {
            get
            {
                if (_devices == null)
                {
                    var newCollection = new FixupCollection<Device>();
                    newCollection.CollectionChanged += FixupDevices;
                    _devices = newCollection;
                }
                return _devices;
            }
            set
            {
                if (!ReferenceEquals(_devices, value))
                {
                    var previousValue = _devices as FixupCollection<Device>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupDevices;
                    }
                    _devices = value;
                    var newValue = value as FixupCollection<Device>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupDevices;
                    }
                }
            }
        }
        private ICollection<Device> _devices;
    
        public virtual Subgroup Subgroup
        {
            get { return _subgroup; }
            set
            {
                if (!ReferenceEquals(_subgroup, value))
                {
                    var previousValue = _subgroup;
                    _subgroup = value;
                    FixupSubgroup(previousValue);
                }
            }
        }
        private Subgroup _subgroup;
    
        public virtual ICollection<Licence> Licences
        {
            get
            {
                if (_licences == null)
                {
                    var newCollection = new FixupCollection<Licence>();
                    newCollection.CollectionChanged += FixupLicences;
                    _licences = newCollection;
                }
                return _licences;
            }
            set
            {
                if (!ReferenceEquals(_licences, value))
                {
                    var previousValue = _licences as FixupCollection<Licence>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupLicences;
                    }
                    _licences = value;
                    var newValue = value as FixupCollection<Licence>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupLicences;
                    }
                }
            }
        }
        private ICollection<Licence> _licences;
    
        public virtual Person Person
        {
            get { return _person; }
            set
            {
                if (!ReferenceEquals(_person, value))
                {
                    var previousValue = _person;
                    _person = value;
                    FixupPerson(previousValue);
                }
            }
        }
        private Person _person;

        #endregion
        #region Association Fixup
    
        private bool _settingFK = false;
    
        private void FixupContractor(Contractor previousValue)
        {
            if (previousValue != null && previousValue.FixedAssets.Contains(this))
            {
                previousValue.FixedAssets.Remove(this);
            }
    
            if (Contractor != null)
            {
                if (!Contractor.FixedAssets.Contains(this))
                {
                    Contractor.FixedAssets.Add(this);
                }
                if (id_contractor != Contractor.id)
                {
                    id_contractor = Contractor.id;
                }
            }
            else if (!_settingFK)
            {
                id_contractor = null;
            }
        }
    
        private void FixupSubgroup(Subgroup previousValue)
        {
            if (previousValue != null && previousValue.FixedAssets.Contains(this))
            {
                previousValue.FixedAssets.Remove(this);
            }
    
            if (Subgroup != null)
            {
                if (!Subgroup.FixedAssets.Contains(this))
                {
                    Subgroup.FixedAssets.Add(this);
                }
                if (id_subgroup != Subgroup.id)
                {
                    id_subgroup = Subgroup.id;
                }
            }
            else if (!_settingFK)
            {
                id_subgroup = null;
            }
        }
    
        private void FixupPerson(Person previousValue)
        {
            if (previousValue != null && previousValue.FixedAssets.Contains(this))
            {
                previousValue.FixedAssets.Remove(this);
            }
    
            if (Person != null)
            {
                if (!Person.FixedAssets.Contains(this))
                {
                    Person.FixedAssets.Add(this);
                }
                if (id_person != Person.id)
                {
                    id_person = Person.id;
                }
            }
            else if (!_settingFK)
            {
                id_person = null;
            }
        }
    
        private void FixupDevices(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Device item in e.NewItems)
                {
                    item.FixedAsset = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Device item in e.OldItems)
                {
                    if (ReferenceEquals(item.FixedAsset, this))
                    {
                        item.FixedAsset = null;
                    }
                }
            }
        }
    
        private void FixupLicences(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Licence item in e.NewItems)
                {
                    item.FixedAsset = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Licence item in e.OldItems)
                {
                    if (ReferenceEquals(item.FixedAsset, this))
                    {
                        item.FixedAsset = null;
                    }
                }
            }
        }

        #endregion
    }
}
